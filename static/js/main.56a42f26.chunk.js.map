{"version":3,"sources":["components/CardViewer.tsx","components/PlayerViewer.tsx","game/Deck.ts","utils/Logger.ts","game/Round.ts","game/Hand.ts","game/Game.ts","components/PlayedCardSlot.tsx","GameMessage.ts","components/Table.tsx","game/Player.ts","bot/Personality.ts","bot/Bots.ts","Computer.ts","App.tsx","serviceWorker.js","index.js"],"names":["CardViewer","onClick","this","props","card","hidden","e","className","undefined","whitespace","style","color","suit","suitColor","value","name","icon","React","PlayerViewer","handleClick","game","hand","round","isPlayerTurn","player","isLocked","play","notYourTurn","addListener","forceUpdate","deck","playerCards","get","length","map","key","toString","hide","Deck","players","cards","turned","Map","getRandomCards","index","forEach","set","slice","minInclusive","maxInclusive","Math","floor","random","Array","orderedCards","getRandomInt","includes","push","LogLevel","toUpperCase","INFO","WARNING","DEBUG","ERROR","GAME","YOU","COMPUTER","message","log","level","emit","console","chalk","bold","keyword","EventEmmiter","Round","firstPlayer","winner","playedCards","currentPlayer","trump","strongestPlayer","draw","getNextCard","indexOf","Error","size","has","Logger","updateWinner","strongestCard","power","Card","toTrumpValue","isTrump","Hand","lock","unlock","rounds","lastTrucker","isTrucoPending","startNewRound","lockHolder","LockHolder","Promise","resolve","setTimeout","max","filter","c","startNewRoundLater","winners","firstRoundWinner","secondRoundWinner","totalDraws","find","EventEmitter","id","Game","hands","firstPlayerIndex","locks","obj","points","reduce","sum","element","startNewHand","truco","acceptTruco","declineTruco","getPlayerScore","startNewHandLater","PlayedCardSlot","Message","defaultMessage","trucoAsk","trucoAccept","trucoDecline","gameWin","messagesHolder","addMessage","messages","getRandomMessageFor","Table","popoverTimeout","priorityElemement","handleTrucoResponse","accepted","closePopoverComputer","closePopover","$","popover","placement","title","timeMs","html","content","current","popoverPlayer","popoverComputer","closePopoverPlayer","popoverHtmlComputer","ReactDOMServer","renderToString","handleTruco","GameMessage","on","computer","formatRoundStatus","Player","Trait","description","Personality","openness","conscientiousness","extroversion","agreeableness","neuroticism","avg","totalWeight","entries","entry","weight","opennessWeight","conscientiousnessWeight","extroversionWeight","agreeablenessWeight","neuroticismWeight","calcWeightedAvg","personalityProbablity","scenarioBias","withScenarioBias","getAvgWithWeight","Bot","personality","bots","ComputerGameplayer","opponent","bot","calcBias","probability","getTrucoResponseProbability","handlePlay","sortCards","cardIndex","trucoBias","trucoProbability","getTrucoProbability","falseTrucoProbability","getFalseTrucoProbability","opponentCard","minimunToWin","addListeners","compareCards","currentCard","suits","startValue","getCardScore","playedCard","App","state","startGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56a42f26.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Card } from \"truco-common\";\n\nimport \"../styles/CardViewer.scss\";\n\nexport interface CardViewerProps {\n  card?: Card;\n  hidden: boolean;\n  onClick?: Function;\n  whitespace?: boolean;\n}\n\nexport interface CardViewerState {}\n\nclass CardViewer extends React.Component<CardViewerProps, CardViewerState> {\n  render() {\n    const { onClick } = this.props;\n    const { card } = this.props;\n    let { hidden } = this.props;\n    if (!card) hidden = true;\n    return (\n      <div\n        onClick={e => (onClick ? onClick!(e, card) : null)}\n        className={`${hidden ? \"truco-card-hidden\" : \"\"} ${\n          card ? \"\" : \"truco-card-slot\"\n        } ${onClick ? \"truco-card-listened\" : \"\"} ${\n          this.props.whitespace !== undefined && this.props.whitespace === true\n            ? \"truco-card-whitespace\"\n            : \"\"\n        } truco-card`}\n        style={{ color: card ? card!.suit.suitColor : \"black\" }}\n      >\n        <div className=\"truco-card-top\">\n          <span className=\"truco-card-value\">\n            {hidden ? \"\" : card!.value.name}\n          </span>\n          <span className=\"truco-card-suit\">\n            {hidden ? \"\" : card!.suit.icon}\n          </span>\n        </div>\n        <div className=\"truco-card-bottom\">\n          <span className=\"truco-card-value\">\n            {hidden ? \"\" : card!.value.name}\n          </span>\n          <span className=\"truco-card-suit\">\n            {hidden ? \"\" : card!.suit.icon}\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CardViewer;\n","import * as React from \"react\";\nimport Player from \"../game/Player\";\nimport Game from \"../game/Game\";\nimport CardViewer from \"../components/CardViewer\";\nimport { Card } from \"truco-common\";\n\nexport interface PlayerViewerProps {\n  player: Player;\n  game: Game;\n  hide: boolean;\n  notYourTurn?: Function;\n}\n\nexport interface PlayerViewerState {}\n\nclass PlayerViewer extends React.Component<\n  PlayerViewerProps,\n  PlayerViewerState\n> {\n  constructor(props: Readonly<PlayerViewerProps>) {\n    super(props);\n    this.props.game.addListener(\"played\", (player: Player, card: Card) => {\n      if (this.props.player === player) {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  handleClick = (e: MouseEvent, card: Card) => {\n    if (\n      !this.props.game.hand.round.isPlayerTurn(this.props.player) ||\n      this.props.game.isLocked()\n    ) {\n      if (this.props.notYourTurn) {\n        this.props.notYourTurn!();\n      }\n      return;\n    }\n    try {\n      this.props.game.play(this.props.player, card);\n    } catch (e) {\n      if (this.props.notYourTurn) {\n        this.props.notYourTurn();\n      }\n      return;\n    }\n  };\n\n  render() {\n    if (\n      this.props.game.hand.deck.playerCards.get(this.props.player)!.length === 0\n    ) {\n      return (\n        <div className=\"table-player\">\n          <CardViewer card={undefined} hidden={true} whitespace={true} />\n        </div>\n      );\n    }\n    return (\n      <div className=\"table-player\">\n        {this.props.game.hand.deck.playerCards\n          .get(this.props.player)!\n          .map(card => (\n            <CardViewer\n              key={card.toString()}\n              card={card}\n              hidden={this.props.hide}\n              onClick={this.props.hide ? undefined : this.handleClick}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n\nexport default PlayerViewer;\n","import { Card, cards as orderedCards } from \"truco-common\";\nimport Player from \"./Player\";\n\nexport default class Deck {\n  cards: Array<Card>;\n  turned: Card;\n  playerCards = new Map<Player, Array<Card>>();\n\n  constructor(players: Array<Player>) {\n    this.cards = this.getRandomCards();\n\n    this.turned = this.cards[0];\n\n    let index = 1;\n    players.forEach(player => {\n      this.playerCards.set(player, this.cards.slice(index, index + 3));\n      index += 3;\n    });\n  }\n\n  private getRandomInt(minInclusive: number, maxInclusive: number) {\n    return Math.floor(Math.random() * maxInclusive) + minInclusive;\n  }\n\n  private getRandomCards(): Array<Card> {\n    let cards = new Array<Card>();\n\n    while (cards.length !== orderedCards.length) {\n      let index = this.getRandomInt(0, orderedCards.length - 1);\n\n      let card: Card;\n\n      do {\n        card = orderedCards[index];\n\n        if (index === orderedCards.length - 1) {\n          index = 0;\n        } else {\n          index++;\n        }\n      } while (cards.includes(card));\n\n      cards.push(card);\n    }\n\n    return cards;\n  }\n}\n","import chalk from \"chalk\";\nimport EventEmmiter from \"events\";\n\nclass LogLevel {\n  name: string;\n  color: string;\n  constructor(name: string, color: string) {\n    this.name = name.toUpperCase();\n    this.color = color;\n  }\n}\n\nconst INFO = new LogLevel(\"info\", \"white\");\nconst WARNING = new LogLevel(\"warning\", \"yellow\");\nconst DEBUG = new LogLevel(\"debug\", \"green\");\nconst ERROR = new LogLevel(\"error\", \"red\");\n\nconst GAME = new LogLevel(\"game\", \"aqua\");\nconst YOU = new LogLevel(\"you\", \"blue\");\nconst COMPUTER = new LogLevel(\"computer\", \"black\");\n\nclass Logger extends EventEmmiter {\n  game(message: string) {\n    this.log(GAME, message);\n  }\n\n  you(message: string) {\n    this.log(YOU, message);\n  }\n\n  computer(message: string) {\n    this.log(COMPUTER, message);\n  }\n\n  info(message: string) {\n    this.log(INFO, message);\n  }\n\n  warning(message: string) {\n    this.log(WARNING, message);\n  }\n\n  debug(message: string) {\n    this.log(DEBUG, message);\n  }\n\n  error(message: string) {\n    this.log(ERROR, message);\n  }\n\n  log(level: LogLevel, message: string) {\n    if (level === null) level = INFO;\n    if (message === null) message = \"\";\n\n    this.emit(`log`, message, level);\n    console.log(\n      chalk.bold(chalk.keyword(level.color)(`[${level.name}]`)),\n      message\n    );\n  }\n}\n\nexport default new Logger();\n","import Player from \"./Player\";\nimport { Card, getNextCard, toTrumpValue } from \"truco-common\";\nimport Logger from \"../utils/Logger\";\n\nexport default class Round {\n  /*\n    When Player = Has a winner\n    When undefined = No winner yet\n    When null = Draw\n  */\n  winner: Player | undefined | null;\n  playedCards = new Map<Player, Card>();\n  players: Array<Player>;\n  currentPlayer: number;\n  trump: Card;\n  strongestPlayer?: Player;\n  draw = false;\n\n  constructor(players: Array<Player>, turned: Card, firstPlayer: number) {\n    this.players = players;\n    this.trump = getNextCard(turned);\n    this.currentPlayer = firstPlayer;\n  }\n\n  isPlayerTurn(player: Player) {\n    return this.currentPlayer === this.players.indexOf(player);\n  }\n\n  play(player: Player, card: Card) {\n    if (this.winner !== undefined) throw new Error(\"Round ended\");\n\n    if (this.playedCards.size === this.players.length)\n      throw new Error(\"All players already played\");\n\n    if (this.playedCards.has(player))\n      throw new Error(\"You already played in that round\");\n\n    if (!this.isPlayerTurn(player)) throw new Error(\"It's not your turn\");\n\n    this.playedCards.set(player, card);\n    Logger.game(`${player.name} played ${card.toString()}`);\n\n    if (this.currentPlayer === this.players.length - 1) {\n      this.currentPlayer = 0;\n    } else {\n      this.currentPlayer++;\n    }\n\n    this.updateWinner(player, card);\n  }\n\n  private updateWinner(player: Player, card: Card) {\n    if (this.strongestPlayer === undefined) {\n      this.strongestPlayer = player;\n      return;\n    }\n\n    let strongestCard = this.playedCards.get(this.strongestPlayer!)!;\n\n    if (strongestCard.value.power === this.trump.value.power) {\n      strongestCard = new Card(\n        toTrumpValue(strongestCard.value),\n        strongestCard.suit\n      );\n    }\n\n    if (card.value.power === this.trump.value.power)\n      card = new Card(toTrumpValue(card.value), card.suit);\n\n    if (card.value.power < strongestCard.value.power) {\n      this.strongestPlayer = player;\n    }\n\n    if (strongestCard.isTrump() && card.isTrump()) {\n      if (card.suit.power < strongestCard.suit.power) {\n        this.strongestPlayer = player;\n        this.draw = false;\n      }\n    } else {\n      this.draw = card.value.power === strongestCard.value.power;\n    }\n\n    if (this.playedCards.size !== this.players.length) return;\n\n    Logger.game(\n      this.draw ? \"Round draw\" : `${this.strongestPlayer.name} won round`\n    );\n\n    this.winner = this.draw ? null : this.strongestPlayer!;\n  }\n}\n","import Player from \"./Player\";\nimport Deck from \"./Deck\";\nimport Round from \"./Round\";\nimport Logger from \"../utils/Logger\";\nimport { Card } from \"truco-common\";\nimport { EventEmitter } from \"events\";\nimport { LockHolder } from \"./Game\";\n\nexport default class Hand extends EventEmitter {\n  players: Array<Player>;\n  rounds = new Array<Round>();\n  firstPlayer: number;\n  /*\n    When Player = Has a winner\n    When undefined = No winner yet\n    When null = Draw\n  */\n  winner: Player | undefined | null;\n  deck: Deck;\n  lastTrucker?: Player;\n  isTrucoPending = false;\n  lock: Function;\n  unlock: Function;\n  private value = 0;\n\n  constructor(\n    players: Array<Player>,\n    firstPlayer: number,\n    lock: Function,\n    unlock: Function\n  ) {\n    super();\n    this.lock = lock;\n    this.unlock = unlock;\n    this.players = players;\n    this.firstPlayer = firstPlayer;\n    this.deck = new Deck(players);\n    this.startNewRound();\n  }\n\n  private startNewRound() {\n    this.rounds.push(\n      new Round(this.players, this.deck.turned, this.firstPlayer)\n    );\n    this.emit(\"newRound\");\n  }\n\n  private startNewRoundLater() {\n    const lockHolder = new LockHolder(\"start new round\");\n    this.lock(lockHolder);\n    return new Promise(resolve =>\n      setTimeout(() => {\n        this.unlock(lockHolder);\n        this.startNewRound();\n        resolve();\n      }, 2500)\n    );\n  }\n\n  get points(): number {\n    return Math.max(this.value, 1);\n  }\n\n  truco(player: Player) {\n    if (!this.round.isPlayerTurn(player)) throw new Error(\"It's not your turn\");\n\n    if (this.value >= 12) {\n      throw new Error(\"Max truco already reached\");\n    }\n\n    if (player === this.lastTrucker)\n      throw new Error(\"You already asked for truco\");\n\n    Logger.game(`${player.name} trucked`);\n    this.lastTrucker = player;\n    this.isTrucoPending = true;\n  }\n\n  acceptTruco(player: Player) {\n    if (!this.isTrucoPending) throw new Error(\"There's nothing to accept\");\n    if (player === this.lastTrucker)\n      throw new Error(\"You cannot accept the truco\");\n\n    this.value += 3;\n    this.isTrucoPending = false;\n    Logger.game(\n      `${player.name} accepted the truco, hand now has ${this.value} point`\n    );\n  }\n\n  declineTruco(player: Player) {\n    if (!this.isTrucoPending) throw new Error(\"There's nothing to accept\");\n    if (player === this.lastTrucker)\n      throw new Error(\"You cannot accept the truco\");\n\n    this.winner = this.lastTrucker;\n    this.isTrucoPending = false;\n    Logger.game(`${player.name} declined the truco`);\n  }\n\n  get round(): Round {\n    return this.rounds[this.rounds.length - 1];\n  }\n\n  play(player: Player, card: Card) {\n    if (!this.deck.playerCards.get(player)!.includes(card))\n      throw new Error(\"Invalid card\");\n\n    if (this.isTrucoPending) throw new Error(\"There's a pending truco request\");\n\n    try {\n      this.round.play(player, card);\n      this.deck.playerCards.set(\n        player,\n        this.deck.playerCards.get(player)!.filter(c => c !== card)\n      );\n    } catch (e) {\n      throw e;\n    }\n\n    this.updateWinner();\n\n    if (this.winner !== undefined) return;\n\n    if (this.round.winner !== undefined) {\n      if (this.round.winner !== null) {\n        this.firstPlayer = this.players.indexOf(this.round.winner);\n      }\n      this.startNewRoundLater();\n    }\n  }\n\n  private updateWinner() {\n    if (this.rounds.length === 1) return;\n\n    if (this.rounds.length === 2) {\n      const winners = this.rounds.map(round => round.winner);\n      const firstRoundWinner = winners[0];\n      const secondRoundWinner = winners[1];\n      const totalDraws = winners.filter(winner => winner === null).length;\n\n      // if both round got a draw\n      if (totalDraws === 2) return;\n      // if only 1 round got a draw\n      else if (totalDraws === 1)\n        this.winner = winners.find(winner => winner !== null);\n\n      // if someone won the 2 rounds\n      if (firstRoundWinner === secondRoundWinner) {\n        this.winner = firstRoundWinner;\n        return;\n      }\n      // if it's no draws and the winners aren't the same, a 3rd round is needed\n      return;\n    }\n\n    // if it's the 3rd round, the round winner is the hand winner unless it's a draw, then, the\n    // winner of the first round won\n    if (this.round.winner === null) {\n      this.winner = this.rounds[0].winner;\n      return;\n    }\n    this.winner = this.round.winner;\n  }\n}\n","import Hand from \"./Hand\";\nimport Player from \"./Player\";\nimport { Card } from \"truco-common\";\nimport Logger from \"../utils/Logger\";\nimport { EventEmitter } from \"events\";\n\nexport class LockHolder {\n  id: string;\n  \n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport default class Game extends EventEmitter {\n  hands = new Array<Hand>();\n  players: Array<Player>;\n  firstPlayerIndex = 0;\n  winner?: Player;\n  locks = new Array<LockHolder>();\n\n  lock = (lockHolder: LockHolder) => {\n    this.locks.push(lockHolder);\n  };\n\n  unlock = (lockHolder: LockHolder) => {\n    this.locks = this.locks.filter(obj => lockHolder !== obj);\n  };\n\n  isLocked(): boolean {\n    return this.locks.length !== 0;\n  }\n\n  constructor(players: Array<Player>) {\n    super();\n    this.players = players;\n  }\n\n  getPlayerScore(player: Player): number {\n    return this.hands\n      .filter(hand => hand.winner === player)\n      .map(hand => hand.points)\n      .reduce((sum, element) => (sum += element), 0);\n  }\n\n  startNewHand() {\n    this.hands.push(\n      new Hand(this.players, this.firstPlayerIndex, this.lock, this.unlock)\n    );\n    this.hand.addListener(\"newRound\", () => this.emit(\"newRound\"));\n    this.emit(\"newHand\");\n  }\n\n  startNewHandLater() {\n    const lockHolder = new LockHolder(\"new hand later\");\n    this.lock(lockHolder);\n    return new Promise(resolve =>\n      setTimeout(() => {\n        this.unlock(lockHolder);\n        this.startNewHand();\n        resolve();\n      }, 2500)\n    );\n  }\n\n  truco(player: Player) {\n    try {\n      this.hand.truco(player);\n      this.emit(\"truco\", player);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  acceptTruco(player: Player) {\n    try {\n      this.hand.acceptTruco(player);\n      this.emit(\"trucoAccepted\", player);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  declineTruco(player: Player) {\n    try {\n      this.hand.declineTruco(player);\n      this.updateWinner();\n      this.emit(\"trucoDeclined\", player);\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  startGame() {\n    this.startNewHand();\n  }\n\n  get hand(): Hand {\n    return this.hands[this.hands.length - 1];\n  }\n\n  updateWinner() {\n    if (this.hand.winner !== undefined) {\n      if (this.hand.winner === null) {\n        Logger.game(\"Hand draw\");\n      } else {\n        Logger.game(`${this.hand.winner.name} won hand`);\n      }\n\n      if (this.firstPlayerIndex === this.players.length - 1) {\n        this.firstPlayerIndex = 0;\n      } else {\n        this.firstPlayerIndex++;\n      }\n      if (this.hand.winner) {\n        if (this.getPlayerScore(this.hand.winner) >= 12) {\n          Logger.game(`${this.hand.winner.name} won the game`);\n          this.emit(\"gameEnded\", this.hand.winner);\n          this.winner = this.hand.winner;\n          return;\n        }\n      }\n      this.startNewHandLater();\n    }\n  }\n\n  play(player: Player, card: Card) {\n    if (this.isLocked()) {\n      console.log(this.locks);\n      throw new Error(\"The game is locked\");\n    }\n\n    try {\n      this.hand.play(player, card);\n      this.emit(\"played\", player, card);\n    } catch (e) {\n      throw e;\n    }\n\n    this.updateWinner();\n  }\n}\n","import * as React from \"react\";\nimport CardViewer from \"./CardViewer\";\nimport Player from \"../game/Player\";\nimport Game from \"../game/Game\";\nimport { Card } from \"truco-common\";\n\nexport interface PlayedCardSlotProps {\n  player: Player;\n  game: Game;\n}\n\nexport interface PlayedCardSlotState {}\n\nclass PlayedCardSlot extends React.Component<\n  PlayedCardSlotProps,\n  PlayedCardSlotState\n> {\n  constructor(props: Readonly<PlayedCardSlotProps>) {\n    super(props);\n    this.props.game.addListener(\"played\", (player: Player, card: Card) => {\n      this.forceUpdate();\n    });\n    this.props.game.addListener(\"newRound\", (player: Player, card: Card) => {\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    return (\n      <CardViewer\n        card={this.props.game.hand.round.playedCards.get(this.props.player)}\n        hidden={\n          this.props.game.hand.round.playedCards.get(this.props.player) ===\n          undefined\n        }\n      />\n    );\n  }\n}\n\nexport default PlayedCardSlot;\n","export class Message {\n  defaultMessage: string;\n\n  constructor(defaultMessage: string) {\n    this.defaultMessage = defaultMessage;\n  }\n}\n\nexport const trucoAsk = new Message(\"Truco!\");\nexport const trucoAccept = new Message(\"Go ahead!\");\nexport const trucoDecline = new Message(\"No way\");\nexport const gameWin = new Message(\"EASY!\");\n\nconst messagesHolder = new Map<Message, Array<string>>();\n\nfunction addMessage(message: Message, ...messages: Array<string>) {\n  messages.push(message.defaultMessage);\n  messagesHolder.set(message, messages);\n}\n\naddMessage(trucoAsk, \"TRUCO!\", \"TRUUCO!\", \"Truco\", \"TRUUUCOOOO!\");\naddMessage(trucoAccept, \"GO AHEAD!\", \"Go ahead loser!\", \"Throw the braba\");\naddMessage(trucoDecline, \"No\", \"Nope\", \"NO LOL\");\naddMessage(gameWin, \"That one was EASY\", \"EZ\", \"LOL\", \"That's all? LOL\");\n\nexport function getRandomMessageFor(message: Message): string {\n  const messages = messagesHolder.get(message);\n\n  if (messages === undefined || messages.length === 0)\n    return message.defaultMessage;\n\n  return messages[Math.floor(Math.random() * messages.length)];\n}\n","import * as React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport PlayerViewer from \"./PlayerViewer\";\nimport CardViewer from \"./CardViewer\";\nimport Game, { LockHolder } from \"../game/Game\";\nimport Player from \"../game/Player\";\n\nimport \"../styles/Table.scss\";\nimport PlayedCardSlot from \"./PlayedCardSlot\";\nimport Round from \"../game/Round\";\nimport $ from \"jquery\";\nimport { Placement } from \"bootstrap\";\n\nimport * as GameMessage from \"../GameMessage\";\n\nexport interface TableProps {\n  game: Game;\n}\n\nexport interface TableState {}\n\nconst lostChar = \"✗\";\nconst wonChar = \"✓\";\nconst drawChar = \"-\";\n\nclass Table extends React.Component<TableProps, TableState> {\n  popoverTimeout = new Map<string, number>();\n  priorityElemement: boolean = false;\n\n  constructor(props: Readonly<TableProps>) {\n    super(props);\n    this.props.game.addListener(\"newRound\", () => {\n      this.forceUpdate();\n      if(!this.props.game.winner) {\n        this.closePopoverComputer();\n        this.closePopoverPlayer();\n      }\n    });\n    this.props.game.addListener(\"newHand\", () => {\n      if(!this.props.game.winner) {\n        this.closePopoverComputer();\n        this.closePopoverPlayer();\n      }\n      this.forceUpdate();\n    });\n    this.props.game.addListener(\"truco\", player => {\n      if (player === this.props.game.players[0]) return;\n      this.popoverHtmlComputer(\n        <div id=\"truco-popover\">\n          <span className=\"truco-response\" id=\"truco-accept\">\n            Yes\n          </span>{\" \"}\n          <span className=\"truco-response\" id=\"truco-decline\">\n            No\n          </span>\n        </div>,\n        \"Asked for Truco\",\n        -1\n      );\n      $(\"#truco-accept\").on(\"click\", () => this.handleTrucoResponse(true));\n      $(\"#truco-decline\").on(\"click\", () => this.handleTrucoResponse(false));\n    });\n    this.props.game.addListener(\"trucoAccepted\", player => {\n      const lockHolder = new LockHolder(\"truco accepted\");\n      this.props.game.lock(lockHolder);\n      if (player === this.props.game.players[0]) {\n        this.popoverPlayer(\n          GameMessage.getRandomMessageFor(GameMessage.trucoAccept)\n        );\n      } else {\n        this.popoverComputer(\n          GameMessage.getRandomMessageFor(GameMessage.trucoAccept)\n        );\n      }\n      setTimeout(() => {\n        this.props.game.unlock(lockHolder);\n        this.forceUpdate();\n      }, 1000);\n    });\n    this.props.game.addListener(\"trucoDeclined\", player => {\n      const lockHolder = new LockHolder(\"truco declined\");\n      this.props.game.lock(lockHolder);\n      if (player === this.props.game.players[0]) {\n        this.popoverPlayer(\n          GameMessage.getRandomMessageFor(GameMessage.trucoDecline)\n        );\n      } else {\n        this.popoverComputer(\n          GameMessage.getRandomMessageFor(GameMessage.trucoDecline)\n        );\n      }\n      setTimeout(() => {\n        this.props.game.unlock(lockHolder);\n        this.forceUpdate();\n      }, 1000);\n    });\n    this.props.game.addListener(\"gameEnded\", (winner: Player) => {\n      this.forceUpdate();\n      if (winner === this.props.game.players[0]) {\n        this.popoverPlayer(\n          GameMessage.getRandomMessageFor(GameMessage.gameWin),\n          undefined,\n          10000\n        );\n      } else {\n        this.popoverComputer(\n          GameMessage.getRandomMessageFor(GameMessage.gameWin),\n          undefined,\n          10000\n        );\n      }\n      this.props.game.lock(new LockHolder(\"Game ended\"));\n    });\n  }\n\n  handleTrucoResponse = (accepted: boolean) => {\n    if (accepted) {\n      this.props.game.acceptTruco(this.props.game.players[0]);\n    } else {\n      this.props.game.declineTruco(this.props.game.players[0]);\n    }\n    this.closePopoverComputer();\n  };\n\n  closePopover = (element: string) => {\n    $(element).popover(\"dispose\");\n    this.priorityElemement = false;\n  };\n\n  popover = (\n    element: string,\n    placement: Placement,\n    message: string,\n    title?: string,\n    timeMs?: number,\n    html?: boolean\n  ) => {\n    if (timeMs === undefined) timeMs = 2000;\n    if (title === undefined) title = \"\";\n\n    if (this.priorityElemement) return;\n    this.closePopover(element);\n    $(element).popover({\n      title: title,\n      content: message,\n      html: html === undefined ? false : html,\n      placement: placement\n    });\n    $(element).popover(\"show\");\n\n    let current = this.popoverTimeout.get(element);\n    if (current === undefined) current = 0;\n\n    this.popoverTimeout.set(element, ++current);\n    if (timeMs > 0) {\n      setTimeout(() => {\n        if (this.popoverTimeout.get(element) === current) {\n          this.closePopover(element);\n        }\n      }, timeMs);\n    } else {\n      this.priorityElemement = true;\n    }\n  };\n\n  popoverPlayer = (message: string, title?: string, timeMs?: number) => {\n    this.popover(\"#player-hand\", \"top\", message, title, timeMs);\n  };\n\n  popoverComputer = (message: string, title?: string, timeMs?: number) => {\n    this.popover(\"#computer-hand\", \"bottom\", message, title, timeMs);\n  };\n\n  closePopoverPlayer = () => {\n    this.closePopover(\"#player-hand\");\n  };\n\n  closePopoverComputer = () => {\n    this.closePopover(\"#computer-hand\");\n  };\n\n  popoverHtmlComputer = (\n    html: JSX.Element,\n    title?: string,\n    timeMs?: number\n  ) => {\n    this.popover(\n      \"#computer-hand\",\n      \"bottom\",\n      ReactDOMServer.renderToString(html),\n      title,\n      timeMs,\n      true\n    );\n  };\n\n  handleTruco = () => {\n    if (!this.props.game.hand.round.isPlayerTurn(this.props.game.players[0])) {\n      this.popoverComputer(\"Wait for your turn\");\n      return;\n    }\n    if (this.props.game.hand.lastTrucker === this.props.game.players[0]) {\n      this.popoverComputer(\"You cant do it now\");\n      return;\n    }\n    this.props.game.truco(this.props.game.players[0]);\n    this.popoverPlayer(GameMessage.getRandomMessageFor(GameMessage.trucoAsk));\n  };\n\n  formatRoundStatus(round: Round, player: Player) {\n    if (round.winner === undefined) return \"_\";\n    if (round.winner === null) {\n      return drawChar;\n    } else {\n      return round.winner === player ? wonChar : lostChar;\n    }\n  }\n\n  render() {\n    const [player, computer] = this.props.game.players;\n\n    return (\n      <div className=\"table\">\n        <div id=\"game-status\">\n          <p id=\"title\">Status</p>\n          <p className=\"score\" id=\"you\">\n            You: {this.props.game.getPlayerScore(player)}\n          </p>\n          <p className=\"score\" id=\"him\">\n            Him: {this.props.game.getPlayerScore(computer)}\n          </p>\n          <p id=\"rounds\">\n            {this.props.game.hand.rounds.map(\n              round => `[${this.formatRoundStatus(round, player)}]`\n            )}\n          </p>\n        </div>\n        <div id=\"turned-card\">\n          <CardViewer card={this.props.game.hand.deck.turned} hidden={false} />\n        </div>\n        <div id=\"computer-hand\">\n          <PlayerViewer game={this.props.game} player={computer} hide={true} />\n        </div>\n        <div id=\"played-cards\">\n          <PlayedCardSlot game={this.props.game} player={computer} />\n          <br />\n          <PlayedCardSlot game={this.props.game} player={player} />\n        </div>\n        <div id=\"player-hand\">\n          <PlayerViewer\n            game={this.props.game}\n            player={player}\n            hide={false}\n            notYourTurn={() => this.popoverComputer(\"Wait for your turn\")}\n          />\n        </div>\n        <span id=\"player-truco-button\" onClick={this.handleTruco}>\n          TRUCO!\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","export default class Player {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n","/*\n\n  Based on \"OCEAN\".\n  Check: \n    https://textimgs.s3.amazonaws.com/boundless-psychology/convert-crop-0-0-729-769.jpe\n    https://courses.lumenlearning.com/boundless-psychology/chapter/trait-perspectives-on-personality/\n*/\n\nexport class Trait {\n  name: string;\n  description: string;\n  value: number;\n\n  constructor(name: string, description: string, value: number) {\n    this.name = name;\n    this.description = description;\n    if (value > 1) {\n      throw new Error(\"The value cannot be more than 1\");\n    }\n    this.value = value;\n  }\n}\n\nexport interface WeightedAvgEntry {\n  weight: number;\n  value: number;\n}\n\nexport default class Personality {\n  openness: Trait;\n  conscientiousness: Trait;\n  extroversion: Trait;\n  agreeableness: Trait;\n  neuroticism: Trait;\n\n  constructor(\n    openness: number,\n    conscientiousness: number,\n    extroversion: number,\n    agreeableness: number,\n    neuroticism: number\n  ) {\n    this.openness = new Trait(\n      \"openness\",\n      \"Imagination, feelings, actions, ideas\",\n      openness\n    );\n    this.conscientiousness = new Trait(\n      \"conscientiousness\",\n      \"Competence, self-discipline, goal-driven\",\n      conscientiousness\n    );\n    this.extroversion = new Trait(\n      \"extroversion\",\n      \"Sociability, assertiveness, emotional expression\",\n      extroversion\n    );\n    this.agreeableness = new Trait(\n      \"agreeableness\",\n      \"Cooperative, trustworthy, good-natured\",\n      agreeableness\n    );\n    this.neuroticism = new Trait(\n      \"neuroticism\",\n      \"tendency toward unstable emotions\",\n      neuroticism\n    );\n  }\n\n  calcWeightedAvg(...entries: WeightedAvgEntry[]) {\n    let avg = 0;\n    let totalWeight = 0;\n    entries.forEach(entry => {\n      let { value, weight } = entry;\n\n      if (weight < 0) {\n        weight = weight * -1;\n        value = 1 - value;\n      }\n\n      totalWeight += weight;\n      avg += value * weight;\n    });\n\n    return avg / totalWeight;\n  }\n\n  getAvgWithWeight(\n    opennessWeight: number,\n    conscientiousnessWeight: number,\n    extroversionWeight: number,\n    agreeablenessWeight: number,\n    neuroticismWeight: number\n  ) {\n    return this.calcWeightedAvg(\n      {\n        value: this.openness.value,\n        weight: opennessWeight\n      },\n      {\n        value: this.conscientiousness.value,\n        weight: conscientiousnessWeight\n      },\n      {\n        value: this.extroversion.value,\n        weight: extroversionWeight\n      },\n      {\n        value: this.agreeableness.value,\n        weight: agreeablenessWeight\n      },\n      {\n        value: this.neuroticism.value,\n        weight: neuroticismWeight\n      }\n    );\n  }\n\n  private withScenarioBias(\n    personalityProbablity: number,\n    scenarioBias?: number\n  ) {\n    if (scenarioBias === undefined) return personalityProbablity;\n\n    return this.calcWeightedAvg(\n      { value: scenarioBias, weight: 2.5 },\n      { value: personalityProbablity, weight: 1 }\n    );\n  }\n\n  getTrucoResponseProbability(scenarioBias?: number): number {\n    return this.withScenarioBias(\n      this.getAvgWithWeight(1, -2, 3, 3, -2),\n      scenarioBias\n    );\n  }\n\n  getTrucoProbability(scenarioBias?: number): number {\n    return this.withScenarioBias(\n      this.getAvgWithWeight(2, -1, 2, 2, 3),\n      scenarioBias\n    );\n  }\n\n  getFalseTrucoProbability(scenarioBias?: number): number {\n    return this.withScenarioBias(\n      this.getAvgWithWeight(2, -4, 4, 1, 3),\n      scenarioBias\n    );\n  }\n}\n","import Personality from \"./Personality\";\n\nexport default class Bot {\n  name: string;\n  personality: Personality;\n\n  constructor(name: string, personality: Personality) {\n    this.name = name;\n    this.personality = personality;\n  }\n}\n\nexport const bene = new Bot(\n  \"Bené\",\n   new Personality(0.7, 0.7, 0.4, 0.6, 0.3)\n);\n\nexport const ednaldo = new Bot(\n  \"Ednaldo\",\n  new Personality(0.7, 0.8, 0.4, 0.3, 0.3)\n);\n\nexport const adivanir = new Bot(\n  \"Adivanir\",\n  new Personality(0.6, 0.4, 0.4, 0.5, 0.4)\n);\n\nexport const baianinho = new Bot(\n  \"Baianinho de Mauá\",\n  new Personality(0.9, 0.9, 0.3, 0.5, 0.1)\n);\n\nexport const katrina = new Bot(\n  \"Katrina\",\n  new Personality(0.7, 0.1, 0.7, 0.55, 0.65)\n);\n\nexport const bots = [bene, ednaldo, adivanir, baianinho, katrina]\n\n","import Player from \"./game/Player\";\nimport Game, { LockHolder } from \"./game/Game\";\nimport Bot, { bots } from \"./bot/Bots\";\nimport { suits, Card } from \"truco-common\";\n\nexport default class ComputerGameplayer {\n  player: Player;\n  opponent: Player;\n  game: Game;\n  bot: Bot;\n  constructor(player: Player, game: Game) {\n    this.game = game;\n    this.player = player;\n    this.opponent = this.game.players[0];\n    this.addListeners();\n    this.bot = bots[Math.floor(Math.random() * (bots.length - 1))];\n    console.log(this.bot.name);\n  }\n\n  private compareCards(card: Card, strongestCard: Card | undefined): Card {\n    if (strongestCard === undefined) return card;\n\n    if (strongestCard === card) return card;\n\n    if (card.value === this.game.hand.round.trump.value) {\n      if (strongestCard.value === this.game.hand.round.trump.value) {\n        if (card.suit.power < strongestCard.suit.power) {\n          return card;\n        } else {\n          return strongestCard;\n        }\n      }\n      return card;\n    }\n\n    if (card.value.power < strongestCard.value.power) strongestCard = card;\n\n    return strongestCard;\n  }\n\n  private sortCards(): Array<Card> {\n    const cards = this.game.hand.deck.playerCards.get(this.player)!;\n    const orderedCards = new Array<Card>();\n\n    while (orderedCards.length !== cards.length) {\n      let strongestCard: Card | undefined;\n      strongestCard = undefined;\n      cards.forEach(card => {\n        if (!orderedCards.includes(card))\n          strongestCard = this.compareCards(card, strongestCard);\n      });\n      orderedCards.push(strongestCard!);\n    }\n    return orderedCards;\n  }\n\n  private minimunToWin(\n    opponentCard: Card,\n    orderedCards: Array<Card>\n  ): Card | undefined {\n    let currentCard: Card | undefined;\n\n    orderedCards.forEach(card => {\n      if (\n        currentCard !== undefined &&\n        this.compareCards(card, opponentCard) === card\n      )\n        currentCard = card;\n    });\n    return currentCard;\n  }\n\n  private getCardScore(card: Card): number {\n    if (card.value === this.game.hand.round.trump.value) {\n      if (card.suit === suits[0]) {\n        return 0.5;\n      } else {\n        return 0.3;\n      }\n    } else if (card.value.power >= 1 && card.value.power <= 3) {\n      return 0.1 + (6 - card.value.power * 2) / 100;\n    }\n    return 0.0;\n  }\n\n  calcBias(startValue?: number) {\n    let scenarioBias = startValue ? startValue : 0.0;\n\n    if (\n      this.game.hand.rounds.length === 2 &&\n      this.game.hand.rounds[0].winner === this.player\n    ) {\n      scenarioBias += 0.25;\n    } else if (this.game.hand.rounds.length === 3) {\n      if (this.game.hand.rounds[0].winner === this.player) {\n        scenarioBias += 0.25;\n      }\n    }\n\n    const cards = this.game.hand.deck.playerCards.get(this.player)!;\n\n    cards.forEach(card => {\n      scenarioBias += this.getCardScore(card);\n    });\n\n    const playedCard = this.game.hand.round.playedCards.get(this.player);\n    const opponentCard = this.game.hand.round.playedCards.get(this.opponent);\n\n    if (playedCard !== undefined) {\n      scenarioBias += this.getCardScore(playedCard!);\n    }\n\n    if (opponentCard !== undefined) {\n      scenarioBias -= this.getCardScore(opponentCard);\n    }\n\n    scenarioBias += (this.game.getPlayerScore(this.player) / 100) * 1.5;\n    scenarioBias -= (this.game.getPlayerScore(this.opponent) / 100) * 1.5;\n\n    this.game.hands\n      .filter(\n        hand => hand.lastTrucker === this.opponent && hand !== this.game.hand\n      )\n      .forEach(hand => {\n        if (hand.points === 1) {\n          scenarioBias += 0.05;\n        } else if (hand.winner === this.player) {\n          scenarioBias += 0.1;\n        } else if (hand.winner === this.opponent) {\n          scenarioBias -= 0.15;\n        }\n      });\n\n    if (this.game.getPlayerScore(this.opponent) === 11) {\n      scenarioBias = 2.0;\n    }\n    return scenarioBias;\n  }\n\n  handleTruco = (player: Player) => {\n    if (this.player === player) {\n      return;\n    }\n\n    const lockHolder = new LockHolder(\"computer handle truco\");\n    this.game.lock(lockHolder);\n\n    const scenarioBias = this.calcBias();\n\n    setTimeout(() => {\n      this.game.unlock(lockHolder);\n      try {\n        const probability = this.bot.personality.getTrucoResponseProbability(\n          scenarioBias\n        );\n        if (Math.random() < probability) {\n          this.game.acceptTruco(this.player);\n        } else {\n          this.game.declineTruco(this.player);\n        }\n      } catch (e) {\n        console.log(e);\n        return;\n      }\n    }, 1000);\n  };\n  handlePlay = () => {\n    if (this.game.hand.round.isPlayerTurn(this.player)) {\n      if (this.game.isLocked()) {\n        return;\n      }\n\n      const lockHolder = new LockHolder(\"computer handle play\");\n      this.game.lock(lockHolder);\n\n      const orderedCards = this.sortCards();\n      let cardIndex = orderedCards.length - 1;\n\n      const trucoBias = this.calcBias(-0.1);\n      const trucoProbability = this.bot.personality.getTrucoProbability(\n        trucoBias\n      );\n      const falseTrucoProbability = this.bot.personality.getFalseTrucoProbability(\n        trucoBias - 0.1\n      );\n\n      if (this.game.hand.rounds.length === 2) {\n        if (this.game.hand.rounds[0].winner === null) {\n          cardIndex = 0;\n        } else if (this.game.hand.rounds[0].winner !== this.player) {\n          const opponentCard = this.game.hand.round.playedCards.get(\n            this.opponent\n          )!;\n\n          const card = this.minimunToWin(opponentCard, orderedCards);\n\n          if (card !== undefined) cardIndex = orderedCards.indexOf(card);\n        } else {\n          if (Math.random() > 0.15) {\n            cardIndex = 0;\n          }\n        }\n      } else if (this.game.hand.rounds.length === 1) {\n        const opponentCard = this.game.hand.round.playedCards.get(\n          this.opponent\n        );\n\n        if (opponentCard === undefined) {\n          if (Math.random() > 0.2) {\n            cardIndex = Math.floor(Math.random() * 2);\n          }\n        } else {\n          if (Math.random() > 0.2) {\n            const card = this.minimunToWin(opponentCard, orderedCards);\n            if (card !== undefined) cardIndex = orderedCards.indexOf(card);\n          }\n        }\n      }\n\n      setTimeout(() => {\n        this.game.unlock(lockHolder);\n        if (\n          this.game.hand.lastTrucker !== this.player &&\n          (Math.random() < trucoProbability ||\n            Math.random() < falseTrucoProbability)\n        ) {\n          this.game.truco(this.player);\n          return;\n        }\n        try {\n          this.game.play(this.player, orderedCards[cardIndex]);\n        } catch (e) {\n          this.handlePlay();\n          return;\n        }\n      }, 1000);\n    }\n  };\n\n  private addListeners() {\n    this.game.addListener(\"played\", this.handlePlay);\n    this.game.addListener(\"newRound\", this.handlePlay);\n    this.game.addListener(\"newHand\", this.handlePlay);\n    this.game.addListener(\"truco\", this.handleTruco);\n    this.game.addListener(\"trucoAccepted\", player => {\n      if (player === this.opponent) {\n        setTimeout(() => {\n          while (this.game.isLocked()) {}\n          this.handlePlay();\n        }, 2000);\n      }\n    });\n  }\n}\n","import * as React from \"react\";\n// import DeckDisplay from \"./components/DeckDisplay\";\nimport Table from \"./components/Table\";\n\nimport Game from \"./game/Game\";\nimport Player from \"./game/Player\";\n\nimport ComputerGameplayer from \"./Computer\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap\";\n\nexport interface AppState {\n  game: Game;\n}\n\nclass App extends React.Component<{}, AppState> {\n  state = { game: new Game([new Player(\"player\"), new Player(\"computer\")]) };\n\n  constructor(props: Readonly<AppState>) {\n    super(props);\n    this.state.game.startGame();\n    new ComputerGameplayer(this.state.game.players[1], this.state.game);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table game={this.state.game} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as $ from 'jquery';\n$(function () {\n  $('[data-toggle=\"popover\"]').popover()\n})\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}